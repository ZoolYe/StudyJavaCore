集合类的由来：
	对象用于封装特有数据，对象多了就需要存储，如果对象的个数不确定，就使用集合容器进行存储
集合特点：
1，用于存储对象的容器
2，集合的长度是可变的
3，集合中不可以存储基本数据类型值

集合容器因为内部的数据结构不同，有多种具体容器，不断向上抽取，就形成了集合框架，框架的顶层Collection
框架的顶层Collection接口：
Collection的常见方法：
1，添加
	boolean add(Object obj);
	boolean addAll(Collection coll);
2，删除
	boolean remove(object obj);
	boolean removeAll(Collection coll);
	void clear();
3，判断
	boolean contains(Object obj);
	boolean containsAll(Collection coll);
	boolean isEmpty();
4，获取
	int size();
	Iterator iterator();取出元素的方式：迭代器
	该对象必须依赖于具体容器，因为每一个容器的数据结构都不同
	所以该迭代器对象是在容器内部实现的
5，其它
	boolean retainAll(Collection coll);取交集
	Object[] toArray();将集合转成数组
	
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
Collection
	|--List:有序(存入和取出的顺序一致)，元素都有索引(角标)，元素可以重复。
	|--Set:元素不能重复，无序
	
List：特有的常见方法：有一个共性特点，就是都可以操作角标
	List集合是可以完成对元素的增删改查
1，添加
	void add(index,element);
	void add(index,collection);
2，删除
	Object remove(index);
3，修改
	Object set(index.element);
4，获取
	Object get(index);
	int indexOf(object);
	int lastIndexOf(object);
	List subList(from,to);
	
List集合是可以完成对元素的增删改查

List:
	|--Vector:内部是数组数据结构，是同步的，增删查询，都慢
	|--ArrayList:内部是数组数据结构，是不同步的，替代了Vector，查询的速度快
	|--LinkedList:内部链表数据结构，是不同步的，增删元素的速度很快
	
LinkedList:
	addFirst();
	addLast();
	jdk1.6
	offerFirst();
	offetLast();
	
	getFirst();//获取但不移除，如果链表为空，抛出NoSuchElementException
	getLast();
	jdk1.6
	peekFirst();//获取但不移除，如果链表为空，返回null
	peekLast();
	
	removeFirst();//获取并移除，如果链表为空，抛出NoSuchElementException
	removeLast();
	jdk1.6
	pollFirst();//获取并移除，如果链表为空，返回null
	pollLast();
	
________________________________________________________________

Set:元素不可以重复，是无序的
	Set接口中的方法和Collection一致
	|--HashSet:内部数据结构是哈希表，是不同步的
		如何保证该集合的元素唯一性呢？
		是通过对象的hashCode和equals方法来完成对象唯一性的
		如果对象的hashCode值不同，那么不用判断equals方法，就直接存储到哈希表中
		如果对象的hashCode值相同，那么要再次判断对象的equals方法是否为true，
		如果为true，视为相同的元素，不存入集合中，如果为false，那么视为不同元素，就进行存储
		注意：如果元素要存储到HashSet集合中，必须覆盖hashCode方法和equals方法
		一般情况下，如果定义的类会产生很多对象，比如人，学生，书，通常都需要覆盖equals，hashCode方法
		建立对象判断是否相同的依据
		
	|--TreeSet:可以对Set集合中的元素进行排序。是不同步的
				判断元素唯一性的方式：就是根据比较方法的返回结果是否是0，是0 就是相同元素，就不存入集合
				
				TreeSet对元素进行排序的方式一：
				让元素自身具备比较功能，元素就需要实现Comparable接口，覆盖compareTo方法
				
				如果不要按照对象中具备的自然顺序进行排序，如果对象中不具备自然顺序，如何解决？
				可以使用TreeSet集合第二种排序方式二：
				让集合自身具备比较功能，定义一个类实现Comparator接口，覆盖compare方法
				将该类对象作为参数传递给TreeSet集合的构造函数。

哈希表确定元素是否相同
1，判断的两个元素的哈希值是否相同，如果相同，再判断两个对象的内容是否相同
2，判断哈希值相同，其实判断的是对象的hashCode方法，判断内容相同用的是equals方法
注意：如果哈希值不同，是不需要判断equals

